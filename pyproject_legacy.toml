#
# pyproject.toml with the old license syntax, compatible with older versions of setuptools
# Use this to install the package from the archive or repo for Python 3.7 and 3.8
# Just rename this file to `pyproject.toml`, overwriting the existent one, and install as usual with pip:
#
#     pip install .
#
# NOTE: This file is only for installing the package from the folder.
#       You DON'T need it if you install the package from PyPi (i.e. pip install bip_utils)
#
[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bip_utils"
dynamic = ["version", "dependencies", "optional-dependencies"]
authors = [
    {name = "Emanuele Bellocchia", email = "ebellocchia@gmail.com"}
]
maintainers = [
    {name = "Emanuele Bellocchia", email = "ebellocchia@gmail.com"}
]
description = "Generation of mnemonics, seeds, private/public keys and addresses for different types of cryptocurrencies"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.7"
keywords = [
    "python",
    "cryptography",
    "ecdsa",
    "ed25519",
    "ed25519-blake2b",
    "nist256p1",
    "secp256k1",
    "sr25519",
    "wallet",
    "hd-wallet",
    "slip10",
    "slip32",
    "bip38",
    "bip39",
    "bip39-substrate",
    "bip32",
    "bip44",
    "bip49",
    "bip84",
    "bip86",
    "bip173",
    "bip350",
    "brainwallet",
    "base58",
    "ss58",
    "bech32",
    "bech32m",
    "segwit",
    "electrum",
    "substrate",
    "taproot",
    "daedalus",
    "byron",
    "shelley",
    "akash",
    "algorand",
    "aptos",
    "arbitrum",
    "atom",
    "avalanche",
    "avax",
    "axelar",
    "band protocol",
    "binance chain",
    "binance smart chain",
    "bitcoin",
    "bitcoin cash",
    "bitcoinsv",
    "bnb",
    "cardano",
    "cardano-byron",
    "cardano-shelley",
    "celestia",
    "celo",
    "certik",
    "cosmos",
    "dash",
    "digibyte",
    "dogecoin",
    "dydx",
    "ecash",
    "elrond",
    "eos",
    "ethereum",
    "ethereum classic",
    "fantom opera",
    "fetch.ai",
    "filecoin",
    "harmony one",
    "huobi chain",
    "icon",
    "injective",
    "iris",
    "irisnet",
    "kava",
    "litecoin",
    "matic",
    "mavryk",
    "metis",
    "monero",
    "multiversx",
    "nano",
    "near",
    "near protocol",
    "neo",
    "neutron",
    "nimiq",
    "okex chain",
    "ontology",
    "optimism",
    "osmosis",
    "pi network",
    "polygon",
    "ripple",
    "secret",
    "solana",
    "stellar",
    "substrate",
    "sui",
    "terra",
    "tezos",
    "theta",
    "tron",
    "vechain",
    "verge",
    "zcash",
    "zilliqa",
    "acala",
    "bifrost",
    "chainx",
    "edgeware",
    "karura",
    "kusama",
    "moonbeam",
    "moonriver",
    "phala",
    "plasm",
    "sora",
    "stafi",
    "polkadot",
]
classifiers = [
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
]

[project.urls]
Homepage = "https://github.com/ebellocchia/bip_utils"
Changelog = "https://github.com/ebellocchia/bip_utils/blob/master/CHANGELOG.md"
Repository = "https://github.com/ebellocchia/bip_utils"
Download = "https://github.com/ebellocchia/bip_utils/archive/v{version}.tar.gz"
Documentation = "https://bip-utils.readthedocs.io"

[tool.setuptools]
packages = {find = {exclude =  ["benchmark*", "docs*", "examples*", "readme*", "tests*"]}}

[tool.setuptools.package-data]
bip_utils = [
    "bip/bip39/wordlist/*.txt",
    "electrum/mnemonic_v1/wordlist/*.txt",
    "monero/mnemonic/wordlist/*.txt",
]

[tool.setuptools.dynamic]
version = {attr = "bip_utils._version.__version__"}
dependencies = {file = ["requirements.txt"]}
optional-dependencies.develop = {file = ["requirements-dev.txt"]}

#
# Tools configuration
#

[tool.ruff]
target-version = "py37"
line-length = 120
exclude = [
    ".eggs",
    ".egg-info",
    ".tox",
    "benchmark",
    "build",
    "docs",
    "examples",
    "readme",
    "tests",
    "my_tests",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # pyflakes
    "N",      # pep8-naming
    "D",      # pydocstyle
    "UP",     # pyupgrade
    "C90",    # mccabe complexity
    "PL",     # pylint
]
ignore = [
    "N802",     # Function name should be lowercase
    "E231",     # Missing whitespace after ':'
    "F821",     # Undefined name (Literal import for Python 3.7 compatibility)
    "UP006",    # Use `type` instead of `Type` for type annotation (Python <3.9 compatibility)
    "UP007",    # Use `X | Y` for type annotations (Python <3.10 compatibility)
    "UP037",    # Remove quotes from type annotation (Literal import for Python 3.7 compatibility)
    "UP045",    #  Use `X | None` for type annotations (Python <3.10 compatibility)
    # pydocstyle ignores from prospector
    "D104",     # Missing docstring in public package
    "D202",     # No blank lines allowed after function docstring
    "D203",     # 1 blank line required before class docstring
    "D205",     # 1 blank line required between summary line and description
    "D212",     # Multi-line docstring summary should start at the first line
    "D406",     # Section name should end with a newline
    "D407",     # Missing dashed underline after section
    "D413",     # Missing blank line after last section
    "D415",     # First line should end with a period, question mark, or exclamation point
    "D417",     # Missing argument description in the docstring: **kwargs
    # pylint ignores from prospector
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]        # Imported but unused, missing docstring
"**/P2*.py" = ["N999"]                  # Invalid module name
"**/BIP*.py" = ["N999"]                 # Invalid module name
"**/typing.py" = ["F401", "F821"]       # Literal import for Python 3.7 compatibility
"**/bip32_key_data.py" = ["PLW1641"]    # Object does not implement `__hash__` method
"**/data_bytes.py" = ["PLW1641"]        # Object does not implement `__hash__` method

[tool.ruff.lint.isort]
known-first-party = []
lines-after-imports = 2
combine-as-imports = false
force-single-line = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.7"
ignore_missing_imports = true
follow_imports = "skip"
exclude = [
    "\\.github",
    "\\.eggs",
    "\\.egg-info",
    "\\.tox",
    "benchmark",
    "build",
    "docs",
    "examples",
    "readme",
    "my_tests",
    "tests",
    "venv",
]

[tool.coverage.run]
omit = [
    "bip_utils/ecc/ed25519/lib/ed25519_lib.py",
    ".tox/*",
    "benchmark/*",
    "tests/*",
    "venv/*",
    "my_tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abstract",
    "@overload",
]
